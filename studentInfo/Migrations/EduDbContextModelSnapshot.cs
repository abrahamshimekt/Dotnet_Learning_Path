// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace studentInfo.Migrations
{
    [DbContext(typeof(EduDbContext))]
    partial class EduDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Course", b =>
                {
                    b.Property<long>("ID")
                        .HasColumnType("bigint");

                    b.Property<string>("CourseCode")
                        .HasColumnType("text");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Dorm", b =>
                {
                    b.Property<long?>("ID")
                        .HasColumnType("bigint");

                    b.Property<string>("DormBlock")
                        .HasColumnType("text");

                    b.Property<int>("DormNumber")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("Dorms");
                });

            modelBuilder.Entity("Instructor", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("InstructorStudent", b =>
                {
                    b.Property<long>("InstructorId")
                        .HasColumnType("bigint");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.HasKey("InstructorId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("InstructorStudents");
                });

            modelBuilder.Entity("Student", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<double>("Cgpa")
                        .HasColumnType("double precision");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Stream")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("StudentCourse", b =>
                {
                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("StudentCourses");
                });

            modelBuilder.Entity("Course", b =>
                {
                    b.HasOne("Instructor", "Instructor")
                        .WithMany("courses")
                        .HasForeignKey("ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Course_Instructor");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Dorm", b =>
                {
                    b.HasOne("Student", "Student")
                        .WithOne("Dorm")
                        .HasForeignKey("Dorm", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Student_Dorm");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("InstructorStudent", b =>
                {
                    b.HasOne("Instructor", "Instructor")
                        .WithMany("Students")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Student", "Student")
                        .WithMany("Instructors")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentCourse", b =>
                {
                    b.HasOne("Course", "Course")
                        .WithMany("Students")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Student", "Student")
                        .WithMany("Courses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Course", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Instructor", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("courses");
                });

            modelBuilder.Entity("Student", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Dorm")
                        .IsRequired();

                    b.Navigation("Instructors");
                });
#pragma warning restore 612, 618
        }
    }
}
